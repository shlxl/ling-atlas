name: "PR-D 性能与体检"
description: "为 Ling-Atlas 项目添加构建体积预算与 Lighthouse 守门机制"
title: "[PR-D] 性能与体检"
labels: ["performance", "CI", "automation"]
body:
  - type: markdown
    attributes:
      value: |
        ## 🎯 目标
        给站点设置体积预算与 Lighthouse 守门：
        - 超限即 CI fail；
        - 本地开发与预览不受影响。

  - type: markdown
    attributes:
      value: |
        ## 🧩 任务

        ### 1️⃣ 产物体积预算脚本
        **文件**：`.codex/budget.mjs`  
        **配置**：`scripts/budget.config.json`  
        - 读取 `docs/.vitepress/dist` 目录  
        - 计算指标：
          - 总体积（MB）
          - 最大 JS chunk（KB）
          - 最大 CSS（KB）
        - 默认阈值：
          - 总 ≤ **5MB**
          - JS ≤ **150KB**
          - CSS ≤ **100KB**
        - 阈值可通过 **环境变量** 覆盖  
        - 超限时 `process.exit(1)`  
        - 打印 Top 10 最大文件明细  

        ### 2️⃣ 集成 Lighthouse CI
        - 开发依赖：`@lhci/cli`
        - 新增配置：`.lighthouserc.json`
        - 运行命令：
          ```bash
          npx lhci autorun \
            --collect.staticDistDir=docs/.vitepress/dist \
            --upload.target=temporary-public-storage
          ```
        - 检查分项：
          - Performance ≥ 90
          - Accessibility ≥ 90
          - Best Practices ≥ 90  
        - 低于阈值时 `exit(1)` 并在日志输出分数与关键建议摘要

        ### 3️⃣ CI 工作流
        在构建流程（VitePress build + Pagefind + Embeddings）完成后，依次执行：
        ```bash
        node .codex/budget.mjs
        npx lhci autorun ...
        ```

        ### 4️⃣ 文档更新
        - 在 `AGENTS.md` 增补章节 **“性能预算与体检”**
        - 包含：
          - 阈值说明与调参方法
          - 失败示例与回滚策略（如何放宽阈值或暂时注释）

  - type: markdown
    attributes:
      value: |
        ## ✅ 验收标准
        - CI 输出预算报告与 Lighthouse 分数
        - 阈值可通过环境变量调整
        - 超限时 CI fail，修复后通过
        - 不影响本地 `dev` / `preview`

  - type: markdown
    attributes:
      value: |
        ## 🔁 回滚策略
        - 临时放宽阈值（通过 env）
        - 或注释 `.codex/budget.mjs` 与 LHCI 步骤，不影响主功能