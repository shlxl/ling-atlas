name: "PR-J 知识 API + Chat"
description: "导出只读知识 API（段落级/可选向量），提供最小 Chat 组件；所有回答必须附可点击引用，语义失败自动降级为 Pagefind-only"
title: "[PR-J] 知识 API + Chat（带引用/可降级）"
labels: ["knowledge-api", "chat", "search", "frontend", "static"]

body:
  - type: markdown
    attributes:
      value: |
        ## 🎯 目标与约束
        - 纯前端/纯静态：**不引入后端**，接口以静态 JSON 暴露。
        - **不阻塞首屏**；模型/向量 **懒加载**；兼容 **BASE 子路径**。
        - 语义检索失败或未加载模型时，**自动降级 Pagefind-only**（展示检索卡片列表）。
        - 回答必须**附带可点击引用**（≥ 2 条，如可），点击跳转原文锚点。

  - type: markdown
    attributes:
      value: |
        ## 🧩 待办任务

        ### 1) 构建期切段与导出
        - 新增脚本：`scripts/chunk-build.mjs`
        - 扫描：`docs/content/**/index.md`
        - 切段规则：**300–500 中文字符/段**，尽量 **保句边界**（以 `。！？；\n` 等断句，超长继续切）
        - 字段：`{ url, title, anchor, chunk }`（`anchor` 来自标题或自动生成）
        - 输出：`docs/public/api/knowledge.json`
          ```json
          { "version": 1, "items": [ { "url": "...", "title": "...", "anchor": "#...", "chunk": "..." } ] }
          ```

        ### 2) （可选）段向量
        - 复用 `embeddings.worker.js`：**首次使用**时批量编码并写入 `localStorage`（key 带版本）。
        - 或 CI 增加 `scripts/embed-chunks.mjs`（Node 端编码）产出 `{ url, anchor, vec }`，合并到 `knowledge.json` 或旁路 `knowledge.vec.json`。
        - 允许失败，**不致构建失败**（可通过 env 控制硬/软失败）。

        ### 3) 前端 Chat 组件
        - 新增：`docs/.vitepress/theme/components/ChatWidget.vue`
        - 流程：
          1. 输入 → **检索**（Pagefind + 可选语义向量 Top-K 融合）
          2. 取 **Top-K 段落**（默认 K=5），在前端做 **简短摘要/回答合成**
          3. **附上引用列表**（≥2 条）——格式：标题 + 段锚点 + 点击跳转
        - 失败/未加载模型：展示“**检索结果卡片列表**”（包含标题、摘要片段、引用链接）而非空白。
        - 组件懒加载：`import("./components/ChatWidget.vue")`

        ### 4) 集成入口
        - 在 `Layout.vue` 增加入口（右下悬浮按钮或导航菜单项）
        - **仅在交互时**加载组件与模型（避免首屏成本）

        ### 5) CI 集成
        - 构建前执行：
          ```bash
          node scripts/chunk-build.mjs
          node scripts/embed-chunks.mjs || true   # 可选
          ```
        - 产物落在 `docs/public/api/` 并随静态资源发布；兼容 BASE 子路径。

  - type: checkboxes
    id: acceptance
    attributes:
      label: ✅ 验收标准
      options:
        - label: 访问 `/api/knowledge.json` 返回 200，并包含切段后的 `items[]`
          required: true
        - label: Chat 回复**总带引用**（可点击跳转原文锚点），引用条数≥2（若检索命中不足则尽可能多）
          required: true
        - label: 语义模块不可用时自动降级为 Pagefind-only，展示**检索卡片列表**而非空白
          required: true
        - label: BASE 子路径下入口按钮、懒加载与链接跳转全部正常
          required: true

  - type: textarea
    id: api-shape
    attributes:
      label: 🧾 API 与数据结构
      description: 粘贴 `knowledge.json`（与可选 `knowledge.vec.json`）示例结构与关键字段说明
      placeholder: |
        {
          "version": 1,
          "items": [
            { "url": "/post/x#h2-term", "title": "……", "anchor": "#h2-term", "chunk": "……" }
          ]
        }

  - type: textarea
    id: chat-ux
    attributes:
      label: 💬 Chat 交互与降级路径
      description: 描述回答合成、Top-K 聚合、引用拼接逻辑；以及语义失败时的 UI 降级表现
      placeholder: |
        - RRF/MMR 融合策略、K/N 的默认值
        - 引用去重规则、同文档多段的锚点聚合
        - 语义失败 → Pagefind-only 的提示文案与卡片字段

  - type: textarea
    id: logs
    attributes:
      label: 🧪 验证与日志
      description: 粘贴本地/CI 运行输出与浏览器控制台片段（加载、检索、降级）
      placeholder: |
        [chunk-build] scanned 37 docs → 420 chunks
        [embed-chunks] vectors: 420, dim: 384 (optional)
        [chat] fallback=pagefind-only (vector model not ready)

  - type: markdown
    attributes:
      value: |
        ## ⚙️ 实施提示
        - 断句可用正则 `/(。|！|？|；|\n)+/`，再按长度聚合至 300–500 字，超长切分。
        - 引用 URL 统一规则：`url + anchor`，确保与 VitePress 标题锚点生成一致。
        - 本地向量缓存：`localStorage['vec:v1:{chunkHash}']`，版本号变更时整体失效。
        - 跨 BASE 的链接与资源加载需使用相对路径或 `withBase()` 辅助。

  - type: markdown
    attributes:
      value: |
        ## 🔁 回滚策略
        - 隐藏 `ChatWidget` 入口，但保留 `/api/knowledge.json` 只读访问（仍可供外部工具使用）。
        - 移除向量步骤（或继续以 Pagefind-only 模式运行），不影响正文与站点搜索。

  - type: markdown
    attributes:
      value: |
        ## 📎 输出物（PR 应包含）
        - `scripts/chunk-build.mjs`（必选）、`scripts/embed-chunks.mjs`（可选）
        - `docs/public/api/knowledge.json`（以及可选的 `knowledge.vec.json`）
        - `docs/.vitepress/theme/components/ChatWidget.vue` 与 `Layout.vue` 入口改动
        - 构建/CI 日志：切段统计、（可选）向量统计、降级验证
